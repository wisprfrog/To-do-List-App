:root{ /*This is a pseudoclass, which is applied (in this case) to the html tag*/
    --primary: #EA40A4;
    --professional: #3A82EE;
    --personal: var(--primary);
    --light: #EEE;
    --grey: #888;
    --dark: #313154;
    --danger: #FF5B57;

    --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

    --professional-glow: 0 1px 3px rgba(58, 130, 238, 0.75);
    --personal-glow: 0 1px 3px rgba(234, 64, 164, 0.75);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

/*  This applies to the inputs which are not type
    radio or checkbox, and the buttons*/
input:not([type="radio"]):not([type="checkbox"]), button{
    appearance: none; /*This removes the default styling of the button*/
    border: none;
    outline: none; /*Outline is kinda padding but outside the border and inside the margin*/
    background: none;
    cursor: initial; /*This is the default cursor, which is the arrow*/
}

body{
    background-color: var(--light);
    color: var(--dark);
}

section{
    /*REM unit is relative to the root's font size*/
    margin: 2rem 0;
    padding: 0 1.5rem;
}

h3{
    font-size: 1rem;
    font-weight: 400;
    color: var(--dark);
    margin-bottom: 0.5rem;
}

h4{
    font-size: 0.875rem;
    font-weight: 700;
    color: var(--grey);
    margin-bottom: 0.5rem;
}

.greeting .title{
    display: flex;
}

.greeting .title input{
    margin-left: 0.5rem;

    /*
        flex isa shorthand property for the flex-grow, flex-shrink and flex-basis properties.
        flex-grow indicates how much the item will grow relative to the rest of the flex items in the flex container.
        flex-shrink indicates how much the item will shrink relative to the rest of the flex items in the flex container.
        flex-basis defines the default size of an element before the remaining space is distributed.
            0% means it will take the minimum space possible, while 100% means it will take all the space.
    */
    flex: 1 1 0%;
    min-width: 0; 
}

.greeting .title, .greeting .title input{
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--dark);
}

.create-todo input[type="text"]{
    display: block;
    width: 100%;

    font-size: 1.125rem;
    color: var(--dark);

    background-color: #FFF;
    border-radius: 0.5rem;
    padding: 1rem 1.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 1.5rem;
}

.create-todo .options{
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    column-gap: 1rem;
    margin-bottom: 1.5rem;
}

.create-todo .options label{
    display: flex;
    flex-direction: column;
    align-content: center;
    align-items: center;
    width: 50%;

    padding: 1.5rem;
    background-color: #FFF;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    cursor: pointer;
}

input[type="radio"], input[type="checkbox"]{
    display: none;
}

/*Creating custom radio buttons and checkboxes*/
.bubble{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    border : 2px solid var(--professional);
    box-shadow: var(--professional-glow);
}

/*  When two class names are combined without a space,
it means the style will only apply to elements that have both classes simultaneously*/
.bubble.personal{ 
    border : 2px solid var(--personal);
    box-shadow: var(--personal-glow);
}

/*  The pseudo element after allow us to add and element ("" in this case)
    after other. This pseudo element won't be in the DOM*/
.bubble::after{
    /*Remove default properties*/
    content: "";
    display: block;
    opacity: 0; 
    width: 0px;
    height: 0px;

    /*General properties for professional and personal categories*/
    background-color: var(--professional);
    box-shadow: var(--professional-glow);
    border-radius: 50%;
    transition: 0.2s ease-in-out;
}

.bubble.personal::after{
    background-color: var(--personal);
    box-shadow: var(--personal-glow);
}

/*  We've added a pseudo element over bubble, which will be shown right after
    checking a bubble element*/

/*  If input checked and is next to a bubble element*/
input:checked ~ .bubble::after{
    width: 7px;
    height: 7px;
    opacity: 1; 
}

.create-todo .options label div{
    color: var(--dark);
    font-size: 1.125rem;
    margin-top: 1rem;
}

.create-todo input[type="submit"]{
    display: block;
    width: 100%;
    font-size: 1.125rem;
    padding: 1rem 1.5rem;
    color: #FFF;
    background-color: var(--primary);
    border-radius: 0.5rem;
    box-shadow: var(--personal-glow);
    cursor: pointer;
    transition: 0.4s ease-in-out;
}

.create-todo input[type="submit"]:hover{
    opacity: 0.75;
}

.todo-list .list{
    margin: 1rem 0;
}

.todo-list .todo-item{
    display: flex;
    flex-direction: row;
    align-items: center;

    background-color: #FFF;
    padding: 1rem;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
}

.todo-item label{
    display: block;
    margin-right: 1rem;
    cursor: pointer;
}

.todo-item .todo-content{
    flex: 1 1 0%;
}

.todo-item .todo-content input{
    color: var(--dark);
    font-size: 1.125rem;
}

.todo-item .actions{
    display: flex;
    flex-direction: row;
    align-items: center;
    column-gap: 1rem;
}

.todo-item .actions button{
    display: block;
    padding: 0.5rem;
    border-radius: 0.25rem;
    color: #FFF;
    cursor: pointer;
    transition: 0.2s ease-in-out;
}

.todo-item .actions button:hover{
    opacity: 0.75;
}

.todo-item .actions .edit{
    margin-right: 0.5rem;
    background-color: var(--primary);
}

.todo-item .actions .delete{
    margin-right: 0.5rem;
    background-color: var(--danger);
}

.todo-item.done .todo-content input{
    text-decoration: line-through;
    color: var(--grey);
}